---
- name: Configure Raspberry Pi for carbernetes
  hosts: rpi
  become: true
  tasks:
    - name: Upgrade the OS (apt-get upgrade)
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        autoclean: true
        autoremove: true
      notify:
        - Restart rpi

    - name: Install packages/prerequisites
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - raspberrypi-bootloader
          - raspberrypi-kernel
          - snapd
        state: present
      notify:
        - Restart rpi

    - name: Flush handlers after upgrade
      ansible.builtin.meta: flush_handlers

    - name: Docker host prerequisites
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: 1
        state: present

    - name: Add Docker GPG apt Key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      ansible.builtin.apt_repository:
        repo: deb [arch=arm64] https://download.docker.com/linux/debian bullseye stable
        state: present

    - name: Install Docker components
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: true

    - name: Enable container features (/boot/cmdline.txt)
      ansible.builtin.replace:
        path: /boot/cmdline.txt
        regexp: '^([\w](?!.*\b{{ item }}\b).*)$'
        replace: '\1 {{ item }}'
      with_items:
        - "cgroup_enable=cpuset"
        - "cgroup_memory=1"
        - "cgroup_enable=memory"
      notify:
        - Restart rpi

    - name: Enable I2C (/boot/config.txt)
      ansible.builtin.lineinfile:
        dest: /boot/config.txt
        regexp: '^#dtparam=i2c_arm=on$'
        line: 'dtparam=i2c_arm=on'
      notify:
        - Restart rpi

    - name: Flush handlers Docker / container / I2C setup
      ansible.builtin.meta: flush_handlers

    - name: Install microk8s
      community.general.snap:
        name:
          - microk8s
        classic: true

    - name: Add pi user to applicable groups
      ansible.builtin.user:
        name: pi
        groups:
          - docker
          - microk8s
        append: true

    - name: Status of mycommunity repo
      ansible.builtin.command: /snap/bin/microk8s addons repo list
      register: microk8s_community_repo
      changed_when: false

    - name: Add custom microk8s community repo
      ansible.builtin.command: >
        /snap/bin/microk8s addons repo add mycommunity  https://github.com/kerrys-learning-lab/microk8s-community-addons
      when: microk8s_community_repo.stdout.find('mycommunity') == -1

    - name: Status of microk8s dns add-on
      ansible.builtin.command: /snap/bin/microk8s status -a dns
      register: microk8s_dns_addon
      changed_when: false

    - name: Install microk8s dns add-on
      ansible.builtin.command: /snap/bin/microk8s enable dns
      when: microk8s_dns_addon.stdout.find('enabled') == -1

    - name: Status of microk8s argocd add-on
      ansible.builtin.command: /snap/bin/microk8s status -a argocd
      register: microk8s_argocd_addon
      changed_when: false

    - name: Install microk8s argocd add-on
      ansible.builtin.command: /snap/bin/microk8s enable argocd
      when: microk8s_argocd_addon.stdout.find('enabled') == -1

    - name: Get microk8s kubectl configuration
      ansible.builtin.command: /snap/bin/microk8s config
      register: microk8s_kubectl_config
      changed_when: false

    - name: Save kubectl config
      delegate_to: localhost
      ansible.builtin.copy:
        content: "{{ microk8s_kubectl_config.stdout }}"
        dest: "kubectl-config-{{ inventory_hostname }}.yaml"
        mode: '644'

  handlers:
    - name: Restart rpi
      ansible.builtin.reboot:
